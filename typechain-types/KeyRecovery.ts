/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface KeyRecoveryInterface extends utils.Interface {
  contractName: "KeyRecovery";
  functions: {
    "addAccount(bytes32,address[],bytes32[],uint256,string)": FunctionFragment;
    "endRecovery()": FunctionFragment;
    "getKeyshare(address,address)": FunctionFragment;
    "getRecoveryShares(address)": FunctionFragment;
    "initiateRecovery(address,string)": FunctionFragment;
    "postRecoveryShares(address,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAccount",
    values: [BytesLike, string[], BytesLike[], BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "endRecovery",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKeyshare",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryShares",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateRecovery",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "postRecoveryShares",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeyshare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postRecoveryShares",
    data: BytesLike
  ): Result;

  events: {
    "RecoveryInitiated(address,address,address[])": EventFragment;
    "ThresholdReached(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RecoveryInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ThresholdReached"): EventFragment;
}

export type RecoveryInitiatedEvent = TypedEvent<
  [string, string, string[]],
  { accountToRecover: string; recoveryRequester: string; guardians: string[] }
>;

export type RecoveryInitiatedEventFilter =
  TypedEventFilter<RecoveryInitiatedEvent>;

export type ThresholdReachedEvent = TypedEvent<
  [string, string],
  { accountToRecover: string; recoveryRequester: string }
>;

export type ThresholdReachedEventFilter =
  TypedEventFilter<ThresholdReachedEvent>;

export interface KeyRecovery extends BaseContract {
  contractName: "KeyRecovery";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeyRecoveryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAccount(
      secret: BytesLike,
      guardians: string[],
      keyShares: BytesLike[],
      K: BigNumberish,
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getKeyshare(
      account: string,
      guardian: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { encryptedKeyshare: string; requester: string }
    >;

    getRecoveryShares(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initiateRecovery(
      account: string,
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postRecoveryShares(
      account: string,
      encryptedShare: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAccount(
    secret: BytesLike,
    guardians: string[],
    keyShares: BytesLike[],
    K: BigNumberish,
    identifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endRecovery(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getKeyshare(
    account: string,
    guardian: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { encryptedKeyshare: string; requester: string }
  >;

  getRecoveryShares(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initiateRecovery(
    account: string,
    identifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postRecoveryShares(
    account: string,
    encryptedShare: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAccount(
      secret: BytesLike,
      guardians: string[],
      keyShares: BytesLike[],
      K: BigNumberish,
      identifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endRecovery(overrides?: CallOverrides): Promise<void>;

    getKeyshare(
      account: string,
      guardian: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { encryptedKeyshare: string; requester: string }
    >;

    getRecoveryShares(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initiateRecovery(
      account: string,
      identifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    postRecoveryShares(
      account: string,
      encryptedShare: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RecoveryInitiated(address,address,address[])"(
      accountToRecover?: null,
      recoveryRequester?: null,
      guardians?: null
    ): RecoveryInitiatedEventFilter;
    RecoveryInitiated(
      accountToRecover?: null,
      recoveryRequester?: null,
      guardians?: null
    ): RecoveryInitiatedEventFilter;

    "ThresholdReached(address,address)"(
      accountToRecover?: null,
      recoveryRequester?: null
    ): ThresholdReachedEventFilter;
    ThresholdReached(
      accountToRecover?: null,
      recoveryRequester?: null
    ): ThresholdReachedEventFilter;
  };

  estimateGas: {
    addAccount(
      secret: BytesLike,
      guardians: string[],
      keyShares: BytesLike[],
      K: BigNumberish,
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getKeyshare(
      account: string,
      guardian: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryShares(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateRecovery(
      account: string,
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postRecoveryShares(
      account: string,
      encryptedShare: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAccount(
      secret: BytesLike,
      guardians: string[],
      keyShares: BytesLike[],
      K: BigNumberish,
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endRecovery(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getKeyshare(
      account: string,
      guardian: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryShares(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateRecovery(
      account: string,
      identifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postRecoveryShares(
      account: string,
      encryptedShare: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
